generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        String?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  phoneNumber   String?   @unique
  address       String?
  image         String?
  password      String?
  role          Role      @default(TRAINER)
  emailVerified DateTime?
  accounts      Account[]
  trainer       Trainer?
  onboarded     Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Trainer {
  id           String     @id @default(cuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  modules      Module[]
  lessons      Lesson[]
  rooms        Room[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trainers")
}

model Department {
  id      String    @id @default(cuid())
  name    String    @unique
  trainer Trainer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

model Room {
  id             String           @id @default(cuid())
  name           String           @unique
  capacity       String
  supervisorId   String?
  supervisor     Trainer?         @relation(fields: [supervisorId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TimetableEntry TimetableEntry[]

  @@map("rooms")
}

model Module {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique
  level     String
  trainerId String?
  trainer   Trainer? @relation(fields: [trainerId], references: [id])
  lessons   Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("modules")
}

model Lesson {
  id             String           @id @default(cuid())
  name           String?
  day            Day
  startTime      String
  endTime        String
  moduleId       String
  module         Module           @relation(fields: [moduleId], references: [id])
  trainerId      String
  trainer        Trainer          @relation(fields: [trainerId], references: [id])
  TimetableEntry TimetableEntry[]
}

model TimetableEntry {
  id         String @id @default(cuid())
  lessonId   String
  roomId     String
  timeSlotId String
  lesson     Lesson @relation(fields: [lessonId], references: [id])
  room       Room   @relation(fields: [roomId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

enum Role {
  HOD
  DAS
  TRAINER
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}
